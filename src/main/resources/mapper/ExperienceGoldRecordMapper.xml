<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.pledge.envconsole.book.mapper.ExperienceGoldRecordMapper">
  <resultMap id="BaseResultMap" type="cn.pledge.envconsole.book.entity.ExperienceGoldRecord">
    <!--@mbg.generated-->
    <!--@Table experience_gold_record-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_address" jdbcType="VARCHAR" property="userAddress" />
    <result column="experience_time" jdbcType="INTEGER" property="experienceTime" />
    <result column="amount" jdbcType="DOUBLE" property="amount" />
    <result column="profit" jdbcType="VARCHAR" property="profit" />
    <result column="income" jdbcType="DOUBLE" property="income" />
    <result column="currency_type" jdbcType="VARCHAR" property="currencyType" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="config_time" jdbcType="TIMESTAMP" property="configTime" />
    <result column="profit_switch" jdbcType="BOOLEAN" property="profitSwitch" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, user_id, user_address, experience_time, amount, profit, income, currency_type, 
    create_time, config_time, profit_switch
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from experience_gold_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from experience_gold_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.pledge.envconsole.book.entity.ExperienceGoldRecord" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into experience_gold_record (user_id, user_address, experience_time, 
      amount, profit, income, 
      currency_type, create_time, config_time, 
      profit_switch)
    values (#{userId,jdbcType=INTEGER}, #{userAddress,jdbcType=VARCHAR}, #{experienceTime,jdbcType=INTEGER}, 
      #{amount,jdbcType=DOUBLE}, #{profit,jdbcType=VARCHAR}, #{income,jdbcType=DOUBLE}, 
      #{currencyType,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{configTime,jdbcType=TIMESTAMP}, 
      #{profitSwitch,jdbcType=BOOLEAN})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="cn.pledge.envconsole.book.entity.ExperienceGoldRecord" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into experience_gold_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userAddress != null">
        user_address,
      </if>
      <if test="experienceTime != null">
        experience_time,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="profit != null">
        profit,
      </if>
      <if test="income != null">
        income,
      </if>
      <if test="currencyType != null">
        currency_type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="configTime != null">
        config_time,
      </if>
      <if test="profitSwitch != null">
        profit_switch,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userAddress != null">
        #{userAddress,jdbcType=VARCHAR},
      </if>
      <if test="experienceTime != null">
        #{experienceTime,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="profit != null">
        #{profit,jdbcType=VARCHAR},
      </if>
      <if test="income != null">
        #{income,jdbcType=DOUBLE},
      </if>
      <if test="currencyType != null">
        #{currencyType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="configTime != null">
        #{configTime,jdbcType=TIMESTAMP},
      </if>
      <if test="profitSwitch != null">
        #{profitSwitch,jdbcType=BOOLEAN},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.pledge.envconsole.book.entity.ExperienceGoldRecord">
    <!--@mbg.generated-->
    update experience_gold_record
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userAddress != null">
        user_address = #{userAddress,jdbcType=VARCHAR},
      </if>
      <if test="experienceTime != null">
        experience_time = #{experienceTime,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="profit != null">
        profit = #{profit,jdbcType=VARCHAR},
      </if>
      <if test="income != null">
        income = #{income,jdbcType=DOUBLE},
      </if>
      <if test="currencyType != null">
        currency_type = #{currencyType,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="configTime != null">
        config_time = #{configTime,jdbcType=TIMESTAMP},
      </if>
      <if test="profitSwitch != null">
        profit_switch = #{profitSwitch,jdbcType=BOOLEAN},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.pledge.envconsole.book.entity.ExperienceGoldRecord">
    <!--@mbg.generated-->
    update experience_gold_record
    set user_id = #{userId,jdbcType=INTEGER},
      user_address = #{userAddress,jdbcType=VARCHAR},
      experience_time = #{experienceTime,jdbcType=INTEGER},
      amount = #{amount,jdbcType=DOUBLE},
      profit = #{profit,jdbcType=VARCHAR},
      income = #{income,jdbcType=DOUBLE},
      currency_type = #{currencyType,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      config_time = #{configTime,jdbcType=TIMESTAMP},
      profit_switch = #{profitSwitch,jdbcType=BOOLEAN}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="experienceGoldRecord" resultType="cn.pledge.envconsole.book.entity.ExperienceGoldRecord">
  select
  *
  from experience_gold_record as p
  left join  user as u
  on u.id = p.user_id
  where p.user_id = #{userId}

  <if test="remark != null">
     and  u.remark = #{remark}
  </if>
  order by p.id desc
  limit #{page},#{size}
</select>
<select id="total" resultType="java.lang.Integer">
  select count(1) from experience_gold_record as p
  left join  user as u
  on u.id = p.user_id
  where p.user_id = #{userId}

  <if test="remark != null">
     and  u.remark = #{remark}
  </if>

</select>
<select id="selectHasReward" resultType="cn.pledge.envconsole.book.entity.ExperienceGoldRecord">
 select * from experience_gold_record
 where experience_time &gt; 0
</select>
<select id="manageExperienceGoldRecord" resultType="cn.pledge.envconsole.book.entity.ExperienceGoldRecord">
  select * from experience_gold_record
  left join user
  on user.id = user_id
  where 1=1
  <if test="ids != null">
     and  user_id in
      <foreach item = "id" collection="ids" separator="," open="(" close=")">
            #{id}
        </foreach>
  </if>
  <if test="userAddress != null">
     and  user.user_address = #{userAddress}
  </if>

  <if test="remark != null">
     and  remark like CONCAT('%', #{remark}, '%')
  </if>
  order by experience_gold_record.id desc
  limit #{page},#{size}

</select>
<select id="manageExperienceGoldRecordTotal" resultType="java.lang.Integer">
  select count(1) from experience_gold_record
  left join user
  on user.id = user_id
  where 1=1
  <if test="ids != null">
     and  user_id in
      <foreach item = "id" collection="ids" separator="," open="(" close=")">
            #{id}
        </foreach>
  </if>
  <if test="userAddress != null">
     and  user.user_address = #{userAddress}
  </if>

  <if test="remark != null">
     and  remark like CONCAT('%', #{remark}, '%')
  </if>

</select>

<select id="selectTotalExperienceGoldByUserId" resultType="java.lang.Double">
  select sum(amount) from experience_gold_record

  where user_id = #{id} and experience_time >0

</select>

  <delete id="deleteByUserId">
    delete from experience_gold_record where user_id = #{userId}
    </delete>
</mapper>